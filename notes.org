* Solver

* Generator
** TODO Non-unique puzzles

* Hints
** TODO Figure out how to turn game histories into pattern times
** TODO Fix analyzer to not apply sets & overlaps until they're the cheapest insight available

** Getting games with history from a sqlite db into a tsv file:
sqlite3 phone-2012-07-08.db <<END
.mode tabs
.output games-phone-2012-07-08.tsv
select p.puzzle, g.history from puzzle p, game g where g.puzzleId = p._id and g.gameState >= 3;
END

* Game
** TODO Rename getState to... what?

* App

** App/UI cleanups
*** DONE Kill Skip command, just have it be Give Up
*** TODO Go ahead and generate improper puzzles, but mark them as skipped if proper only
*** TODO Allow the playing and capture of improper puzzles, just warn before showing
*** TODO Finish help content
*** TODO Show user ID settings page at installation time?
*** TODO Give visual indication when try to set an unsettable location
*** TODO Evaluate captured puzzles' symmetries, if found store in properties
    - why not do this for generated puzzles too, if they don't match the original symmetry
    - had a puzzle today that started life as double mirror but ended up (almost) matching single mirror
*** TODO Make translation of symmetry names possible
*** TODO Make capture reasonably sized on tablets
    - consider wrapping in a scroll view too, for when an improper puzzle is detected
    - for whatever reason, this messes with SudokuView: the input radius becomes tiny

** Publishing the app
*** TODO Make other graphics for play store

** Improper (non-unique) puzzles
*** TODO Handle completion of potentially improper puzzles
    - by asking whether it was unique (?)
    - I think I don't like this idea

** Cross-installation work
*** TODO Use backup service to keep the chosen user ID & properness setting
*** TODO Handle synced puzzles and attempts
*** TODO Write an appengine app that gathers data from the android app
    - use GUID to identify the installation
    - allow login using Google ID to keep different installations from generating the same puzzles
    - will android tell us which Google ID installed the app?
    - when the app is slightly off the ground, sign up for Cloud Endpoints at http://endpoints-trusted-tester.appspot.com/

** Replay cleanups
*** TODO Try making selection color darker
*** TODO Try not minimizing disproofs until they're selected
*** TODO Why does the first trail in puzzle 14 switch errors?
*** TODO Automatically pause the replay on switch of trail, just after the move
    - Or, rethink this.  Not clear it would be helpful.
*** TODO Bug: analysis not being interrupted
    - No longer seeing this?
*** TODO Clearing the present insight should clear the selected location too
    - should it also clear the error displayed?
    - or possibly everything but the nub of the error?
*** TODO Think about animation of insight display
    - for complex implications, this could help the visualization

** List view ideas
*** TODO Add a count to the list spinner: #puzzles in collection
*** TODO Handle the importing of collections of puzzles
    - Add an activity that's triggered by .sdm files
    - Change the way we set up new attempts: look for attempt-less puzzles and queue one
    - Still want to generate new puzzles: add a pref for how often to do this, as
      a number between 0 and 1 (probably with 4-5 discrete choices: never,
      occasionally, etc)
*** TODO Consider supporting other selection-based operations on the list: deletion, exporting


* App engine app
** Protocols
*** Installation data
    - listen for prefs updates, queue an update
    - queue an update at app start too
    - keep a pref containing last json confirmed rec'd by server
    - on update: prepare json describing installation, compare against that pref
    - if different, and have an internet connection:
      - clear out pref
      - send new json
      - if get reply, set pref with new json; then update prefs sent back

** API from phone
   - Send installation info:
     - installation ID
     - phone model info
     - email address (opt)
     - generation stream number
   - > return generation stream number (opt)
     - and puzzles & attempts from other installations
     - and other installations info
     - and recommended puzzles?
   - Send attempt:
     - installation ID
     - attempt ID -- why not?
     - puzzle
     - puzzle params
     - history -- log and drop if history's > say 50k
     - startTime, stopTime
   - Send vote:
     - installation ID
     - puzzle
     - vote
   - Get puzzle stats

** Push notifications to phone
   - Recommended puzzle
   - Other installation info updated

** Schema
   - Installation: root, key = installation ID
     - optional email address (with index)
     - opaque ID with index (generated)
     - phone model, generation stream number
     - PuzzleHistory: child, key = puzzle string
       - index on puzzle string
       - source, generation params
       - contains all attempt histories (up to 20 or something)
         - each with history string, elapsed time, #moves, #trails,
           solved/gave up flag, attempt ID from phone, startTime, stopTime
       - if not first installation for this user that tackled this puzzle,
         pointer to the one that was first
   - Puzzle: root, key = puzzle string
     - contains generation params if applicable
     - contains puzzle sources and installation IDs they came from
     - contains summary of stats on this puzzle:
       - how many played
       - how many won on first attempt
       - avg elapsed time
       - avg #moves
       - avg #trails
       - perhaps distributions of above
   - User: root, key = email address
     - opaque ID with index (generated)
     - contains list of installation IDs

** The web app
   - sample puzzles?
   - stats? num puzzles? num installations? num users? rates of change?
   - for logged-in users, info about their stuff

** Constraints
   - The installation ID and email address are secret--can't let them leak out of the app engine app
   - So we need alternative IDs that we expose and index on
   - Is there an encryption service?  Is it possible to have params not visible via source?

* Math
** Pathological grids
   - How bad can they get?
*** TODO Solve one in the debugger, see what's going on

** Canonical grids
   - How to compare two grids for equivalence?
   - Possible permutations that preserve constraints:
     - transposition
     - permutation of numerals
     - permutation of block-rows or block-columns
     - permutation of rows within a block-row or columns within a block-column
     - rotation (can it be expressed by the others? -- yes)
*** TODO Re-read the "how many sudokus" paper
    - Canonical grid?

* References
** J. F. Crook: A Pencil-and-Paper Algorithm for Solving Sudoku Puzzles
   - http://www.ams.org/notices/200904/tx090400460p.pdf
   - The trails approach, essentially, including different colors
