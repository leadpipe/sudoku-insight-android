* Solver

* Generator
** TODO Non-unique puzzles

* Hints
** TODO Figure out how to turn game histories into pattern times
** TODO Fix analyzer to not apply sets & overlaps until they're the cheapest insight available

** Getting games with history from a sqlite db into a tsv file:
sqlite3 phone-2012-07-08.db <<END
.mode tabs
.output games-phone-2012-07-08.tsv
select p.puzzle, g.history from puzzle p, game g where g.puzzleId = p._id and g.gameState >= 3;
END

* Game
** TODO Rename getState to... what?

* App
** TODO Kill the prefs for individual symmetries: just use them all
** TODO Use "None" as the name for the Random symmetry (when applicable)
** TODO Use today's date as the seed for generating puzzles
   - Hash the following things together for basic seed:
     - Today's date
     - A daily counter per symmetry
     - The generator (symmetry preserving or not)
     - "Properness" flag (allows >1 solution or not)
     - An installation number (pref to get different puzzles on different devices)
       - This solution to this problem sucks
       - Another not-very-good solution: call to a central server
         - works, except when (say) on an airplane, the place you're most likely
           to want to use multiple devices
       - How about checking in with the central server periodically, and having
         it keep track of the devices, and assigning each one a number mod
         device count; each one would then generate every nth puzzle, offset
         - I think this is the best approach.  It also gives us a jumping off
           point for recommendations, and for gathering stats on puzzles
   - Use this to shuffle all the symmetries
     - (if they're all enabled, no need for this step)
   - Choose the first symmetry in the shuffled list that's enabled
   - Add the symmetry to the hash
   - Use this as the seed for generating the puzzle
   - Use json notation for the generator params
   - Possibly add a name that summarizes all of this
** TODO Use backup service to keep basic prefs, like generation params
** TODO Write an appengine app that gathers data from the android app
   - use GUID to identify the installation
   - allow login using Google ID to keep different installations from generating the same puzzles
** DONE Graphical display of insights (rudimentary)
   - when paused:
     - light up all locations with implied moves; on tap, list the insights
     - (not done) also light up all errors: single locations, units, or the actual conflicts
     - special highlight for the next assigned location (maybe it's just selected first)
   - when running:
     - list the insights for the next move
** DONE Figure out how to find, show productive trailheads
** TODO Get a better handle on when to stop the replay
   - we should be stopping on switch of trail, rather than only on lack of justifying insight
   - we should be showing the move that we stopped on, with the reason for the stop
** TODO Graphical display of insights (advanced)
   - when running, display the insights found for the latest move
   - when paused, display the insights that would be applied on tap
   - when exploring, display the insights after the move
   - how to display:
     - forced loc: the numeral with a representation of the unit as either a line or a square
     - forced num: the numeral overlaid on a representation of all the numerals
       in a clock face, with all but the numeral in question crossed out
     - overlap: clock face of numerals within the overlapping locations, with the
       numerals of the overlaps going through that location shown, and connected
       with a line somehow
     - locked set: for each location, the list of possible numerals for that location
     - conflict: show conflicting assignments in red
     - barred loc: like forced num, but without an overlaid numeral and with
       _all_ the numerals in the clock face crossed out; also, rim the location in
       red
     - barred num: rim the unit in red, display the numeral crossed out in every
       open location
     - also, we need a way to highlight a move that is not supported by a set of
       insights.  Maybe this is a special kind of (non-)insight?  I'm thinking
       maybe a 2x2 grid of question marks behind the numeral
   - per-location insight display:
     - 3 bits for unit indicators; set by forced loc, overlap, locked set
     - NumSet for crossed-out numerals on clock face; set by forced num,
       overlap, locked set, barred loc, barred num.
     - maybe 2nd NumSet for the error ones, to display in red?
     - NumSet for numerals to be highlighted on the clock face, set by overlaps
     - NumSet for numerals to be displayed within the clock circle: set by
       assignments and locked sets
     - flag for error border
     - flag for question marks
   - list or set of units containing errors for border
** TODO Think about animation of insight display
   - it's mostly the overlaps that would be obviously improved by this
** TODO Figure out why the progress indicator stops
   - Damn guava splitter static initialization is one reason
   - But can't be the only thing, or probably even the main one
** TODO Add a count to the list spinner: #puzzles in collection
** TODO Handle the importing of collections of puzzles
   - Add an activity that's triggered by .sdm files
   - Change the way we set up new games: look for game-less puzzles and queue one
   - Still want to generate new puzzles: add a pref for how often to do this, as
     a number between 0 and 1 (probably with 4-5 discrete choices: never,
     occasionally, etc)
** TODO Add common menu items (like prefs) to various activities
** TODO Figure out how to add "up" behavior to other activities
** TODO Improve new-trail icon
** TODO Make icons for launcher, home

** TODO Revamp prefs page to use ICS stuff

** TODO Preference for non-unique puzzles
** TODO Handle completion of potentially non-unique puzzles
   - by asking whether it was unique

** TODO Give visual indication when try to set an unsettable location

** TODO Consider supporting other selection-based operations on the list: deletion, exporting
** Possible list view tweaks
   - Collection info (or all) in header?
   - Remember last collection?
   - Filtering?

* Site
** TODO Look into data backup
** TODO Figure out how and what to share

* Math
** Pathological grids
   - How bad can they get?
*** TODO Solve one in the debugger, see what's going on

** Canonical grids
   - How to compare two grids for equivalence?
   - Possible permutations that preserve constraints:
     - transposition
     - permutation of numerals
     - permutation of block-rows or block-columns
     - permutation of rows within a block-row or columns within a block-column
     - rotation (can it be expressed by the others? -- yes)
*** TODO Re-read the "how many sudokus" paper
    - Canonical grid?

* References
** J. F. Crook: A Pencil-and-Paper Algorithm for Solving Sudoku Puzzles
   - http://www.ams.org/notices/200904/tx090400460p.pdf
   - The trails approach, essentially, including different colors
