* Solver

* Generator
** TODO What about non-unique puzzles?

* Hints
** TODO Start work on basic visual strategies

* Game
** DONE Write basic gameplay
   - moves
   - complete timestamped history
   - trails
** DONE Undo stack
** DONE Add command exception, checked
   - make stack propagate exception before altering state
   - have move command throw if move fails
** DONE Add Sudoku.Listener
   - notify on moves
   - on suspend/resume
   - etc
** DONE Fix trails so their first move can be undone
   - still ok to disallow other modifications to trailhead
** DONE Rename pause to suspend

* App
** DONE Write basic grid display
** DONE Write input method thingy
** TODO Decide on, implement basic trail workflow
   - going with buttons/lists outside the grid for now
   - we'll simplify it later
** TODO Guice-ify the app with roboguice
** TODO Manage game suspension/resumption from activity
** TODO Add timer display
** TODO Add undo/redo buttons
** TODO Have separate view to show while generating puzzles, button to start playing
** TODO Write landscape layout
** TODO Emulate ICS activity bar
** TODO Look into data backup
** TODO Make database for game state

* Math
** Pathological grids
   - How bad can they get?
*** TODO Solve one in the debugger, see what's going on

** Canonical grids
   - How to compare two grids for equivalence?
   - Possible permutations that preserve constraints:
     - transposition
     - permutation of numerals
     - permutation of block-rows or block-columns
     - permutation of rows within a block-row or columns within a block-column
     - rotation (can it be expressed by the others? -- yes)
*** TODO Re-read the "how many sudokus" paper
    - Canonical grid?
