/*
Copyright 2012 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package us.blanshard.sudoku.gen;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import us.blanshard.sudoku.core.Grid;
import us.blanshard.sudoku.core.Solver;

import com.google.common.collect.Sets;
import com.google.gson.JsonObject;

import org.junit.Test;

import java.util.Set;

public class GeneratorTest {
  @Test public void basic() throws Exception {
    Set<Grid> puzzles = Sets.newHashSet();
    int numSymmetrical = 0, numAsymmetrical = 0;

    for (int stream = 1; stream <= 3; ++stream)
      for (int month = 10; month <= 12; ++month)
        for (int counter = 5; counter < 10; ++counter) {
          JsonObject puzzleDesc = Generator.generateBasicPuzzle(stream, 2012, month, counter);
          Grid puzzle = Grid.fromString(puzzleDesc.get(Generator.PUZZLE_KEY).getAsString());

          assertTrue("Same puzzle generated by different params", puzzles.add(puzzle));
          assertEquals("Wrong number of solutions",
              Solver.solve(puzzle, Generator.MAX_SOLUTIONS).numSolutions,
              puzzleDesc.get(Generator.NUM_SOLUTIONS_KEY).getAsInt());

          assertEquals("Regenerating the same puzzle must yield an equal result", puzzleDesc.toString(),
              Generator.regeneratePuzzle(puzzleDesc).toString());

          if (puzzleDesc.has(Generator.SYMMETRY_KEY)) {
            assertTrue("Purported symmetrical puzzle wasn't",
                Symmetry.byName(puzzleDesc.get(Generator.SYMMETRY_KEY).getAsString()).describes(puzzle));
            ++numSymmetrical;
          } else if (puzzleDesc.has(Generator.BROKEN_SYMMETRY_KEY)) {
            assertFalse("Purported asymmetrical puzzle wasn't",
                Symmetry.byName(puzzleDesc.get(Generator.BROKEN_SYMMETRY_KEY).getAsString()).describes(puzzle));
            ++numAsymmetrical;
          } else {
            fail("Generated puzzles are supposed to have symmetry info");
          }
        }

    assertTrue("Both symmetrical and asymmetrical puzzles must be represented here",
        numSymmetrical > 0 && numAsymmetrical > 0);
  }
}
