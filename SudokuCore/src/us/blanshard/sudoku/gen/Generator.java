/*
Copyright 2012 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package us.blanshard.sudoku.gen;

import static com.google.common.base.Preconditions.checkArgument;

import us.blanshard.sudoku.core.Grid;

import com.google.common.base.Charsets;
import com.google.common.base.Splitter;
import com.google.common.hash.HashCode;
import com.google.common.hash.Hashing;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.Iterator;
import java.util.Random;

/**
 * Static methods to generate Sudokus. They are returned as JSON objects
 * containing properties keyed by constants defined in this class.
 *
 * @author Luke Blanshard
 */
public class Generator {

  /**
   * The JSON property key whose value is the flattened string of the puzzle's
   * starting grid.
   */
  public static final String PUZZLE_KEY = "puzzle";

  /**
   * The JSON property key whose value is the puzzle's name.  Generated puzzles
   * are named as version:stream:year-month:counter, where version is the
   * generation algorithm version number, stream is the generated-puzzle-stream
   * number, year is a 4-digit year number, month is a month number between 1
   * and 12, and counter is a positive integer.
   */
  public static final String NAME_KEY = "name";

  /**
   * The JSON property key whose value is the symmetry exhibited by the puzzle's
   * clues, if any.
   */
  public static final String SYMMETRY_KEY = "symmetry";

  /**
   * The JSON property key whose value is the symmetry underlying the puzzle's
   * clues, when that symmetry has been broken.
   */
  public static final String BROKEN_SYMMETRY_KEY = "brokenSymmetry";

  /**
   * A JSON property key for a puzzle's source. Not used in puzzles generated by
   * this class.
   */
  public static final String SOURCE_KEY = "source";

  /**
   * A JSON property key for a puzzle's generation algorithm version number.
   */
  public static final String VERSION_KEY = "version";

  /**
   * A JSON property key for a puzzle's generated-puzzle-stream number.
   */
  public static final String STREAM_KEY = "stream";

  /**
   * A JSON property key for a puzzle's year.
   */
  public static final String YEAR_KEY = "year";

  /**
   * A JSON property key for a puzzle's month.
   */
  public static final String MONTH_KEY = "month";

  /**
   * A JSON property key for a puzzle's counter.
   */
  public static final String COUNTER_KEY = "counter";

  /**
   * Identifies the generation algorithm corresponding to {@link
   * #generateBasicPuzzle}.
   */
  public static final int BASIC_VERSION = 1;

  /**
   * Generates a proper Sudoku with the given parameters, returns it as a JSON
   * object with the properties {@link #PUZZLE_KEY}, {@link #NAME_KEY}, and
   * either {@link #SYMMETRY_KEY} or {@link #BROKEN_SYMMETRY_KEY}.
   */
  public static JSONObject generateBasicPuzzle(int stream, int year, int month, int counter)
      throws JSONException {
    return generatePuzzle(BASIC_VERSION, stream, year, month, counter);
  }

  /**
   * Splits a puzzle name as returned by {@link #generatePuzzle} into its
   * constituent properties {@link #VERSION_KEY}, {@link #STREAM_KEY},
   * {@link #YEAR_KEY}, {@link #MONTH_KEY}, and {@link #COUNTER_KEY}.
   */
  public static JSONObject parsePuzzleName(String name) throws JSONException {
    Iterator<String> it = Splitter.on(':').split(name).iterator();
    String version = it.next();
    String stream = it.next();
    String yearMonth = it.next();
    String counter = it.next();
    checkArgument(!it.hasNext());
    it = Splitter.on('-').split(yearMonth).iterator();
    String year = it.next();
    String month = it.next();
    checkArgument(!it.hasNext());
    return new JSONObject()
        .put(VERSION_KEY, Integer.parseInt(version))
        .put(STREAM_KEY, Integer.parseInt(stream))
        .put(YEAR_KEY, Integer.parseInt(year))
        .put(MONTH_KEY, Integer.parseInt(month))
        .put(COUNTER_KEY, Integer.parseInt(counter));
  }

  /**
   * Generates the puzzle implied by the name in the given puzzle descriptor.
   */
  public static JSONObject regeneratePuzzle(JSONObject puzzleDesc) throws JSONException {
    return regeneratePuzzle(puzzleDesc.getString(NAME_KEY));
  }

  /**
   * Generates the puzzle whose generated name is as given.
   */
  public static JSONObject regeneratePuzzle(String name) throws JSONException {
    JSONObject parts = parsePuzzleName(name);
    return generatePuzzle(
        parts.getInt(VERSION_KEY),
        parts.getInt(STREAM_KEY),
        parts.getInt(YEAR_KEY),
        parts.getInt(MONTH_KEY),
        parts.getInt(COUNTER_KEY));
  }

  /**
   * Generates the puzzle with the given parameters.
   */
  public static JSONObject generatePuzzle(
      int version, int stream, int year, int month, int counter) throws JSONException {
    String name = version + ":" + stream + ":" + year + "-" + month + ":" + counter;
    HashCode hash = Hashing.murmur3_128().hashString(name, Charsets.UTF_8);
    Random random = new Random(hash.asLong());

    switch (version) {
      case BASIC_VERSION:
        return generateBasicPuzzle(name, random);

      default:
        throw new IllegalArgumentException("Unrecognized generation algorithm version number " + version);
    }
  }

  private static JSONObject generateBasicPuzzle(String name, Random random) throws JSONException {
    Symmetry symmetry = Symmetry.choose(random);
    Grid puzzle = GenerationStrategy.SUBTRACTIVE_RANDOM.generate(random, symmetry);
    String symKey = symmetry.describes(puzzle) ? SYMMETRY_KEY : BROKEN_SYMMETRY_KEY;
    return new JSONObject()
        .put(PUZZLE_KEY, puzzle.toFlatString())
        .put(NAME_KEY, name)
        .put(symKey, symmetry.getName());
  }
}
