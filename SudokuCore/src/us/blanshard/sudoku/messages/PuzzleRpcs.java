/*
 * Copyright 2013 Google Inc. Licensed under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
 * or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package us.blanshard.sudoku.messages;

import us.blanshard.sudoku.game.Move;
import us.blanshard.sudoku.gen.Generator;

import java.util.List;

import javax.annotation.Nullable;

/**
 * RPC messages related to puzzles.
 */
public class PuzzleRpcs {
  /**
   * The RPC method for updating a solution attempt. The word "attempt" is a
   * noun in this context, apologies for the confusion.
   */
  public static final String ATTEMPT_UPDATE_METHOD = "attempt.update";

  public static class AttemptParams {
    /** The installation ID. */
    public String installationId;
    /** The identifier of the attempt within the given installation. */
    public long attemptId;
    /** The flattened string of the puzzle's starting grid. */
    public String puzzle;
    /** The identifier of the puzzle within the given installation. */
    public long puzzleId;
    /** If generated by {@link Generator}, its name for the puzzle. */
    @Nullable public String name;
    /**
     * If captured or entered from an external source, the user's description of
     * that source.
     */
    @Nullable public String source;
    /** The moves made during this solution attempt. */
    public List<Move> history;
    /**
     * Total elapsed milliseconds. This must match the timestamp on the last
     * move, if the attempt succeeded, but may be larger than that if the
     * attempt failed.
     */
    public long elapsedMs;
    /** When the attempt was finished, in milliseconds since the epoch. */
    public long stopTime;
  }

  public static class AttemptResult {
    /**
     * Whether this attempt counts as the first attempt for the puzzle by this
     * installation.
     */
    public boolean wasFirst;
  }

  /** The RPC method for updating a puzzle's vote. */
  public static final String VOTE_UPDATE_METHOD = "vote.update";

  public static class VoteParams {
    /** The installation ID. */
    public String installationId;
    /** The flattened string of the puzzle's starting grid. */
    public String puzzle;
    /** The vote for the puzzle: 1, 0, or -1. */
    public int vote;
  }

  public static class VoteResult {

  }

  /** The RPC method for fetching information about a puzzle. */
  public static final String PUZZLE_GET_METHOD = "puzzle.get";

  public static class PuzzleParams {
    public String puzzle;
  }

  public static class PuzzleResult {
    @Nullable public String name;
    @Nullable public List<String> sources;
    public int numAttempts;
    public int numUpVotes;
    public int numDownVotes;
    @Nullable public Stat elapsedMsStat;
    @Nullable public Stat numMovesStat;
    @Nullable public Stat numTrailsStat;
  }

  public static class Stat {
    public int count;
    public double min;
    public double max;
    public double mean;
    public double stdDev;
    public double var;
    @Nullable public Double median;
    @Nullable public Double q1;
    @Nullable public Double q3;
  }
}
